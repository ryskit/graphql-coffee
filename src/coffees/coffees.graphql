scalar Date

interface Drink {
  name: String!
}

type Tea implements Drink {
  name: String!
}

"""
Coffee model
"""
type Coffee implements Drink {
  id: ID!
  name: String!
  brand: String!
  flavors: [Flavor!]!
  createdAt: Date
}

type Flavor {
  id: ID!
  name: String!
}

"""
Create coffee input object type.
"""
input CreateCoffeeInput {
  """
  A new coffee name.
  """
  name: String!
  brand: String!
  flavors: [String!]!
}

input UpdateCoffeeInput {
  name: String
  brand: String
  flavors: [String!]
}

type Query {
  coffees: [Coffee!]!
  coffee(id: ID!): Coffee!
  drinks: [Drink!]!
}

type Mutation {
  createCoffee(createCoffeeInput: CreateCoffeeInput!): Coffee!
  updateCoffee(id: ID!, updateCoffeeInput: UpdateCoffeeInput!): Coffee!
  removeCoffee(id: ID!): Coffee!
}
